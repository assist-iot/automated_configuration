# Default values for enabler.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# String to partially override enabler.fullname template (will maintain the release name).
nameOverride: ""
# String to fully override enabler.fullname template.
fullnameOverride: ""
# Deploy all the components in specific K8s node(s).
enablerNodeSelector: {}
# Cilium Multi-cluster global service.
globalService: false

# Component autoconfig values.
autoconfig:
  tier: external
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: docker.io/assistiot/automated_configuration
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: NodePort
    ports:
      port1:
        port: 8080
        targetPort: 8080
        containerPort: 8080
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    REQUIREMENTS_MET_TOPIC: requirement-met-topic-1
    RESOURCES_TOPIC: resources-topic-1
    SYSTEM_CONFIG_NAME: system_config_1


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component eventstoredb values.
eventstoredb:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: docker.io/eventstore/eventstore
    # Overrides the image tag whose default is the chart appVersion.
    tag: "20.10.2-buster-slim"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: NodePort
    ports:
      port1:
        port: 1113
        targetPort: 1113
        containerPort: 1113
        nodePort: ""
        protocol: TCP
      port2:
        port: 2113
        targetPort: 2113
        containerPort: 2113
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    EVENTSTORE_CLUSTER_SIZE: "1"
    EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: "true"
    EVENTSTORE_ENABLE_EXTERNAL_TCP: "true"
    EVENTSTORE_EXT_TCP_PORT: "1113"
    EVENTSTORE_HTTP_PORT: "2113"
    EVENTSTORE_INSECURE: "true"
    EVENTSTORE_MEM_DB: "true"
    EVENTSTORE_RUN_PROJECTIONS: All
    EVENTSTORE_START_STANDARD_PROJECTIONS: "true"

  # Component data persistence
  persistence:
    enabled: false
    existingClaim: ""
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 50Mi

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component apachezookeeper values.
apachezookeeper:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: docker.io/confluentinc/cp-zookeeper
    # Overrides the image tag whose default is the chart appVersion.
    tag: "7.5.1"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: NodePort
    ports:
      port1:
        port: 2181
        targetPort: 2181
        containerPort: 2181
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    ZOOKEEPER_CLIENT_PORT: "2181"
    ZOOKEEPER_TICK_TIME: "2000"

  # Component data persistence
  persistence:
    enabled: false
    existingClaim: ""
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 50Mi

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component apachekafka values.
apachekafka:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: docker.io/confluentinc/cp-kafka
    # Overrides the image tag whose default is the chart appVersion.
    tag: "7.5.1"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: NodePort
    ports:
      port1:
        port: 9092
        targetPort: 9092
        containerPort: 9092
        nodePort: ""
        protocol: TCP
      port2:
        port: 29092
        targetPort: 29092
        containerPort: 29092
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://localhost:29092
    KAFKA_BROKER_ID: "1"
    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"

  # Component data persistence
  persistence:
    enabled: false
    existingClaim: ""
    # mountPath: /path/in/container
    accessModes:
      - ReadWriteOnce
    size: 50Mi

  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Component apachekafkaui values.
apachekafkaui:
  tier: internal
  replicaCount: 1

  # Configuration of the container image.
  imagePullSecrets: []
  image:
    repository: docker.io/provectuslabs/kafka-ui
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    pullPolicy: IfNotPresent
  
  # Configuration of the service: type and ports.
  service:
    type: NodePort
    ports:
      port1:
        port: 8080
        targetPort: 8080
        containerPort: 8080
        nodePort: ""
        protocol: TCP

  # The specification of the resources is needed for the proper functioning 
  # of the Smart Orchestrator enabler (requests)
  # and of the Resource provisioning enabler (limits).
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    # minReplicas: 1
    # maxReplicas: 3
    # targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # Include here the environment variables to be used in containers section of the component's manifest.
  # TODO: Here and in the manifest is included an example, please adapt them to the requirements of your component.
  envVars:
    KAFKA_CLUSTERS_0_NAME: local


  # Configure this parameters to deploy the component in specific K8s node(s).
  nodeSelector: {}
  tolerations: []
  affinity: {}
